import bot, { weatherMenu } from "../app.js";
import { getCityLocation, getWeatherInfo } from "../services/index.js";

let timerId = null;
export const enterCityName = (chatId) => {
  bot.sendMessage(
    chatId,
    "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–µ –í–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ø–æ–≥–æ–¥—É",
  );
};

export const getWeather = async (chatId, messageText, type) => {
  let cityLocation = null;
  let weatherData = null;
  try {
    cityLocation = await getCityLocation(messageText);
    const lat = cityLocation.data[0].lat;
    const lon = cityLocation.data[0].lon;

    if (lat && lon) {
      weatherData = await getWeatherInfo(lat, lon);
    }
  } catch (err) {
    bot.sendMessage(
      chatId,
      `–í–∏–±–∞—á—Ç–µ, –∞–ª–µ ${messageText} –º—ñ—Å—Ç–∞ –Ω–µ–º–∞—î –≤ –º–æ—ó–π –±–∞–∑—ñ. –°–ø—Ä–æ–±—É—Ç–µ –∑–Ω–æ–≤—É.`,
    );
  }

  switch (type) {
    case "3":
    case "6":
      clearInterval(timerId);
      await sendWeatherToUser(chatId, messageText, weatherData);
      subscription(chatId, messageText, type, cityLocation);
      bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å", {
        reply_markup: {
          keyboard: weatherMenu,
          resize_keyboard: true,
        },
      });
      break;
    case "–≤—ñ—Ç–µ—Ä":
      await sendWindToUser(chatId, messageText, weatherData);
      bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å", {
        reply_markup: {
          keyboard: weatherMenu,
          resize_keyboard: true,
        },
      });
      break;
    default:
      bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å", {
        reply_markup: {
          keyboard: weatherMenu,
          resize_keyboard: true,
        },
      });
      break;
  }
};

const sendWeatherToUser = async (chatId, messageText, cityWeather) => {
  try {
    const data = cityWeather.data.list[0];
    const temp = Math.round(data.main.temp);

    const clouds = data.weather[0].description;
    const visibility = data.visibility;
    const pop = data.pop;

    bot.sendMessage(
      chatId,
      `<b>üèôÔ∏èÔ∏è –ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ - ${messageText}</b>\n
     üå°Ô∏è –¢–µ–º–ø–µ—Ç–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è ${temp}¬∞C\n
     ‚òÅÔ∏è –ù–∞ –Ω–µ–±—ñ ${clouds}\n
     üå´Ô∏è –í–∏–¥–∏–º—ñ—Å—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö - ${visibility}m\n
     üåßÔ∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ - ${pop}%\n
                  <b>–ë–∞–∂–∞—î–º–æ —Å–æ–Ω—Ü—è —ñ —Ç–µ–ø–ª–∞ –Ω–∞–≤–∫–æ–ª–æ, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ–≥–æ–¥–∏ üíï</b>`,
      { parse_mode: "HTML" },
    );
  } catch (err) {
    bot.sendMessage(
      chatId,
      `–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –º–∞—é –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤ –º—ñ—Å—Ç—ñ <b>${messageText}</b>. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑`,
      { parse_mode: "HTML" },
    );
  }
};

const sendWindToUser = async (chatId, messageText, weatherData) => {
  try {
    const data = weatherData.data.list[0].wind;
    const speed = data.speed;
    const deg = data.deg;
    const gust = data.gust;
    bot.sendMessage(
      chatId,
      `<b>üèôÔ∏èÔ∏è –ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ - ${messageText}</b>\n
     üå¨Ô∏è  –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: ${speed} –º/—Å
     ‚ÜóÔ∏è  –ù–∞–ø—Ä—è–º–æ–∫ –≤—ñ—Ç—Ä—É: ${deg}¬∞
    üí®  –ü–æ—Ä–∏–≤–∏ –≤—ñ—Ç—Ä—É: ${gust} –º/—Å
üîî   <b>–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –ø–æ–≥–æ–¥—É –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ, —Ç–∞ –∑–º–æ–∂–∏—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–æ–±—É üíï</b>`,
      { parse_mode: "HTML" },
    );
  } catch (err) {
    bot.sendMessage(
      chatId,
      `–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –º–∞—é –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ—Ç–µ—Ä –≤ –º—ñ—Å—Ç—ñ <b>${messageText}</b>. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑`,
      { parse_mode: "HTML" },
    );
  }
};

const subscription = async (chatId, messageText, type, cityLocation) => {
  const lat = cityLocation.data[0].lat;
  const lon = cityLocation.data[0].lon;
  let weatherData = null;
  const hours = type * 60 * 60 * 1000;

  timerId = setInterval(async () => {
    if (lat && lon) {
      weatherData = await getWeatherInfo(lat, lon);
    }

    sendWeatherToUser(chatId, messageText, weatherData);
  }, hours);
};
